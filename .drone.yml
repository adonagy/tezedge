##############################################################################################################
# Drone contains these pipelines:
# - standalone-tests (just rust tests)
# - sandbox-inject-operation (runs sandboxed ocaml and rust nodes and checks p2p, rpc between them, using tezos_client)
# - integration-offline-tests (runs snapshoted local ocaml nodes and rust node)
# - connect-from-different-network-test (runs ocaml nodes and rust node)
##############################################################################################################
# Ocaml stuff is based on image tezos/tezos:v7.3 (if released new one, fell free to upgrade it here)
##############################################################################################################

##############################################################################################################
# This pipeline:
# - only one which checkouts git
# - runs just run tests, and build artifacts to 'build' volume,
# - aslo copies files needed from git for other pipelines
##############################################################################################################
kind: pipeline
name: build-and-tests

workspace:
  path: /drone/src

steps:
- name: cleanup-data
  image: alpine/git
  user: root
  volumes:
    - name: build
      path: /artifacts
    - name: sandbox-data
      path: /tmp/sandbox
  commands:
    - rm -rf /tmp/sandbox/light-node
    - rm -rf /tmp/sandbox/tezos-node
    - rm -rf /tmp/sandbox/tezos-client
    - rm -rf /home/tezos/data/
    # - rm -rf /artifacts/*
    - cp ./light_node/etc/tezedge_sandbox/sign_first_block_with_activator.py /artifacts && chmod 755 /artifacts/sign_first_block_with_activator.py

# - name: test-and-build-artifacts
#   image: simplestakingcom/tezedge-ci-builder:latest
#   user: root
#   volumes:
#     - name: build
#       path: /artifacts
#     - name: sandbox-data
#       path: /tmp/sandbox
#   environment:
#     RUST_BACKTRACE: 1
#     SODIUM_USE_PKG_CONFIG: 1
#     OCAML_BUILD_CHAIN: remote
#     LOG_LEVEL: info
#     OCAML_LOG_ENABLED: false
#   commands:
#     # prepare rust toolchain dir
#     - echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib"
#     # build and test
#     - cargo build --release --workspace
#     - cargo test --release --workspace
#     # build and run special tests
#     - export LD_LIBRARY_PATH=./tezos/interop/lib_tezos/artifacts
#     - export PROTOCOL_RUNNER=/drone/src/target/release/protocol-runner
#     - cargo test --package shell --release -- --nocapture --ignored test_mutliple_protocol_runners_with_one_write_multiple_read_init_context
#     - cargo test --package shell --release -- --nocapture --ignored test_readonly_protocol_runner_connection_pool
#     - cargo test --package shell --release -- --nocapture --ignored test_actors_apply_blocks_and_check_context_and_mempool
#     # build and run benches
#     - cargo bench -- --nocapture
#     - cargo bench --tests -- --nocapture
#     # collect binary artefacts
#     - mkdir /artifacts/ffi
#     - mkdir /artifacts/tezedge
#     - mkdir -p /artifacts/identities
#     - cp ./target/release/light-node /artifacts
#     - cp ./target/release/protocol-runner /artifacts
#     - cp ./target/release/libtezos_interop_callback.so /artifacts/ffi
#     - cp ./tezos/interop/lib_tezos/artifacts/libtezos.so /artifacts/ffi
#     - cp `find ./target/release/deps/ | grep integration_test | grep -v "\.d" | head -1` /artifacts/rpc_integration_test
#     - cp ./light_node/etc/tezedge_sandbox/sandbox-patch-context.json /tmp/sandbox/
#     - cp ./light_node/etc/tezedge_sandbox/006-carthage-protocol-parameters.json /tmp/sandbox/
#     - cp ./light_node/etc/tezedge_sandbox/tezedge_drone_sandbox.config /tmp/sandbox/
#     - cp ./light_node/etc/drone/assert_equals.sh /artifacts/ && chmod 755 /artifacts/assert_equals.sh
#     - cp ./light_node/etc/drone/assert_contains.sh /artifacts/ && chmod 755 /artifacts/assert_contains.sh
#     - cp ./light_node/etc/drone/identities/* /artifacts/identities/
#     - cp ./light_node/etc/tezedge/tezedge_drone.config /artifacts/tezedge/

volumes:
  - name: build
    host:
      path: /etc/tezedge-ci-build/
  - name: sandbox-data
    host:
      path: /etc/tezedge-ci-data/sandbox

trigger:
  branch:
    - master
    - develop

##############################################################################################################
# This pipeline runs tezedge node with sandbox configuration and does transfer without the tezos_client
##############################################################################################################
---
kind: pipeline
name: sandbox-inject-operation

clone:
  disable: true

environment:
  SODIUM_USE_PKG_CONFIG: 1
  NETWORK: sandbox
  OCAML_NODE_RPC_CONTEXT_ROOT: http://ocaml-node-sandbox-run:8732
  TEZEDGE_NODE_RPC_CONTEXT_ROOT: http://tezedge-node-sandbox-run:18732
  ACTIVATOR_SECRET: unencrypted:edsk31vznjHSSpGExDMHYASz45VZqXN4DPxvsa4hAyY8dHM28cZzp6
  BOOTSTRAP1_IDENTITY: tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx
  BOOTSTRAP1_PUBLIC: edpkuBknW28nW72KG6RoHtYW7p12T6GKc7nAbwYX5m8Wd9sDVC9yav
  BOOTSTRAP1_SECRET: unencrypted:edsk3gUfUPyBSfrS9CCgmCiQsTCHGkviBDusMxDJstFtojtc1zcpsh
  BOOTSTRAP2_IDENTITY: tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN
  BOOTSTRAP2_PUBLIC: edpktzNbDAUjUk697W7gYg2CRuBQjyPxbEg8dLccYYwKSKvkPvjtV9
  BOOTSTRAP2_SECRET: unencrypted:edsk39qAm1fiMjgmPkw1EgQYkMzkJezLNewd7PLNHTkr6w9XA2zdfo

steps:
# run empty rust node and wait for it
- name: tezedge-node-sandbox-run
  image: simplestakingcom/tezedge-ci-builder:latest
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: build
      path: /artifacts
    - name: sandbox-data
      path: /tmp/sandbox
  environment:
    SODIUM_USE_PKG_CONFIG: 1
    RUST_BACKTRACE: 1
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4}' > /tmp/sandbox/tezedge_ip.txt
    - cp /artifacts/protocol-runner /tmp/sandbox/
    - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
    - export LD_LIBRARY_PATH="/artifacts/ffi:$rust_libs"
    - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
    - /artifacts/light-node --config-file /tmp/sandbox/tezedge_drone_sandbox.config --identity-expected-pow 0.0 --identity-file /tmp/sandbox/light-node/identity.json --tezos-data-dir /tmp/sandbox/tezos-node --bootstrap-db-path /tmp/sandbox/light-node --network sandbox --protocol-runner /tmp/sandbox/protocol-runner --disable-bootstrap-lookup --peer-thresh-high 1 --peer-thresh-low 1 --sandbox-patch-context-json-file /tmp/sandbox/sandbox-patch-context.json --log-level trace --ocaml-log-enabled true

- name: wait-for-tezedge-to-start
  image: simplestakingcom/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap --bootstrap --level=0 --node_tezedge=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

# run empty ocaml sandbox and wait for it
- name: ocaml-node-sandbox-run
  user: root
  image: tezos/tezos:v7.3
  detach: true
  volumes:
    - name: sandbox-data
      path: /tmp/sandbox
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4}' > /tmp/sandbox/ocaml_ip.txt
    - mkdir /home/tezos/data/
    - mkdir /tmp/sandbox/tezos-client
    - tezos-node config init --network sandbox --data-dir /home/tezos/data/ --net-addr 0.0.0.0:9732 --rpc-addr 0.0.0.0:8732 --expected-pow 0.0 --connections 1
    - tezos-node identity generate 0.0 --data-dir /home/tezos/data/
    - tezos-node run --network sandbox --data-dir /home/tezos/data/ --sandbox /tmp/sandbox/sandbox-patch-context.json --no-bootstrap-peers --singleprocess --bootstrap-threshold 1 -vv

- name: wait-for-ocaml-to-start
  image: simplestakingcom/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap --bootstrap --level=0 --node_ocaml=$${OCAML_NODE_RPC_CONTEXT_ROOT}

# connect both nodes with tezos-admin-client
- name: connect-ocaml-and-rust
  user: root
  image: tezos/tezos:v7.3
  volumes:
    - name: sandbox-data
      path: /tmp/sandbox
  commands:
    - tezos-admin-client -A `cat /tmp/sandbox/ocaml_ip.txt` -P 8732 connect address `cat /tmp/sandbox/tezedge_ip.txt`:9732
    - sleep 3
# TODO: instead of sleep 3, check status established
# TODO: write rpc test for check network/peers

# we will only use the tezos-client for transfer not baking
- name: prepare-tezos-client-for-signing
  user: root
  image: tezos/tezos:v7.3
  volumes:
    - name: sandbox-data
      path: /tmp/sandbox
  commands:
    - tezos-client --base-dir /tmp/sandbox/tezos-client -A `cat /tmp/sandbox/ocaml_ip.txt` -P 8732 import secret key activator $${ACTIVATOR_SECRET}
    - tezos-client --base-dir /tmp/sandbox/tezos-client -A `cat /tmp/sandbox/ocaml_ip.txt` -P 8732 import secret key bootstrap1 $${BOOTSTRAP1_SECRET}
    - tezos-client --base-dir /tmp/sandbox/tezos-client -A `cat /tmp/sandbox/ocaml_ip.txt` -P 8732 import secret key bootstrap2 $${BOOTSTRAP2_SECRET}
    # - tezos-client --base-dir /tmp/sandbox/tezos-client -A `cat /tmp/sandbox/tezedge_ip.txt` -P 18732 --block genesis activate protocol PsCARTHAGazKbHtnKfLzQg3kms52kSRpgnDY982a9oYsSXRLQEb with fitness 1 and key activator and parameters /tmp/sandbox/006-carthage-protocol-parameters.json --timestamp $(TZ='AAA+1' date +%FT%TZ)

# activates the protocol by injecting the first block 
- name: activate-protocol-preparation
  user: root
  image: cfmanteiga/alpine-bash-curl-jq
  volumes:
    - name: build
      path: /artifacts
    - name: sandbox-data
      path: /tmp/sandbox
  commands:
    - TEZEDGE_URL=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
    - protocol=$(curl -X GET "$TEZEDGE_URL/chains/main/blocks/genesis/protocols" | jq -r '.next_protocol')
    - timestamp=$(date +%s)
    # Construct the JSON_PREAPPLY_REQUEST to call the preapply with; known vlaues are: command(activate), hash(PsCARTHAGazKbHtnKfLzQg3kms52kSRpgnDY982a9oYsSXRLQEb), fitness(["00","0000000000000001"]), operations([])
    # signature is the zero signature (edsigtXomBKi5CTRf5cjATJWSyaRvhfYNHqSUGrn4SdbYRcGwQrUGjzEfQDTuqHhuA8b2d8NarZjz8TRf65WkpQmo423BtomS8Q)
    - signature=edsigtXomBKi5CTRf5cjATJWSyaRvhfYNHqSUGrn4SdbYRcGwQrUGjzEfQDTuqHhuA8b2d8NarZjz8TRf65WkpQmo423BtomS8Q
    # - JSON_PROTOCOL_PARAMETER=$(cat /tmp/sandbox/006-carthage-protocol-parameters.json)
    # - (TODO) protocol_parameters= call FFI protocol_parameters with JSON_PROTOCOL_PARAMETER
    # mock data for now
    - protocol_parameters=0000056d6d05000004626f6f7473747261705f6163636f756e747300cc01000004300058000000023000370000006564706b75426b6e5732386e5737324b4736526f48745957377031325436474b63376e4162775958356d385764397344564339796176000231000e00000034303030303030303030303030000004310058000000023000370000006564706b747a4e624441556a556b36393757376759673243527542516a79507862456738644c63635959774b534b766b50766a745639000231000e00000034303030303030303030303030000004320058000000023000370000006564706b7554586b4a4447634664356e683656764d7a38706858785533426937683668716779774e466931765a5466514e6e53315256000231000e00000034303030303030303030303030000004330058000000023000370000006564706b754672526f445345624a59677852744c783270733832556461596331577766533973453131796861755a7435446743486255000231000e00000034303030303030303030303030000004340058000000023000370000006564706b76384555554836386a6d6f336637556d3550657a6d66477252463234676e664c70483373564e774a6e5635625643784c326e000231000e00000034303030303030303030303030000000017072657365727665645f6379636c657300000000000000004001626c6f636b735f7065725f6379636c6500000000000000204001626c6f636b735f7065725f636f6d6d69746d656e7400000000000000104001626c6f636b735f7065725f726f6c6c5f736e617073686f7400000000000000104001626c6f636b735f7065725f766f74696e675f706572696f640000000000000050400474696d655f6265747765656e5f626c6f636b7300170000000230000200000031000231000200000030000001656e646f72736572735f7065725f626c6f636b00000000000000404002686172645f6761735f6c696d69745f7065725f6f7065726174696f6e0008000000313034303030300002686172645f6761735f6c696d69745f7065725f626c6f636b00090000003130343030303030000270726f6f665f6f665f776f726b5f7468726573686f6c6400030000002d310002746f6b656e735f7065725f726f6c6c000b0000003830303030303030303000016d696368656c736f6e5f6d6178696d756d5f747970655f73697a65000000000000408f4002736565645f6e6f6e63655f726576656c6174696f6e5f746970000700000031323530303000016f726967696e6174696f6e5f73697a6500000000000010704002626c6f636b5f73656375726974795f6465706f736974000a0000003531323030303030300002656e646f7273656d656e745f73656375726974795f6465706f73697400090000003634303030303030000462616b696e675f7265776172645f7065725f656e646f7273656d656e74002200000002300008000000313235303030300002310007000000313837353030000004656e646f7273656d656e745f726577617264002200000002300008000000313235303030300002310007000000383333333333000002636f73745f7065725f627974650005000000313030300002686172645f73746f726167655f6c696d69745f7065725f6f7065726174696f6e000600000036303030300002746573745f636861696e5f6475726174696f6e000800000031393636303830000171756f72756d5f6d696e000000000000409f400171756f72756d5f6d617800000000000058bb40016d696e5f70726f706f73616c5f71756f72756d000000000000407f4001696e697469616c5f656e646f727365727300000000000000f03f0264656c61795f7065725f6d697373696e675f656e646f7273656d656e740002000000310000
    - JSON_COMMAND=$( jq -n -c -r --arg protocol_parameters "$protocol_parameters" '{"command":"activate","hash":"PsCARTHAGazKbHtnKfLzQg3kms52kSRpgnDY982a9oYsSXRLQEb","fitness":["00","0000000000000001"],"protocol_parameters":$protocol_parameters}' )
    - JSON_PREAPPLY_REQUEST=$( jq -n -c -r --arg protocol "$protocol" --arg signature "$signature" --argjson JSON_COMMAND "$JSON_COMMAND" '{"protocol_data":{"protocol":$protocol,"content":$JSON_COMMAND,"signature":$signature},"operations":[]}' )
    - echo "JSON TO SEND - $JSON_PREAPPLY_REQUEST"
    - preapply=$(curl -X POST "$TEZEDGE_URL/chains/main/blocks/genesis/helpers/preapply/block?timestamp=1598445170" -H "Content-Type:application/json" --data $JSON_PREAPPLY_REQUEST)
    - echo "preapply - $preapply"
    # the result of the preapply operations is the shell header of the first block
    # <THIS IS THE FORGE> then the shell_header reutrned by preapply and JSON_COMMAND is merged and transformed to bytes
    # data_no_signature is the product of the FORGE
    # - data_no_signature=(TODO) call forge: shell_header json + JSON_COMMAND
    - data_no_signature=00000001018fcf233671b6a04fcf679d2a381c2544ea6c1ea29ba6157776ed8424c7ccd00b000000005f465672000e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a800000011000000010000000008000000000000000119f3a1126198fb2e3b0fc98d99916844a38e25cf4c8a29def706f3ce85d927d0003e5e3a606afab74a59ca09e333633e2770b6492c5e594455b71e9a2f0ea92afb0000001100000001000000000800000000000000010000056d6d05000004626f6f7473747261705f6163636f756e747300cc01000004300058000000023000370000006564706b75426b6e5732386e5737324b4736526f48745957377031325436474b63376e4162775958356d385764397344564339796176000231000e00000034303030303030303030303030000004310058000000023000370000006564706b747a4e624441556a556b36393757376759673243527542516a79507862456738644c63635959774b534b766b50766a745639000231000e00000034303030303030303030303030000004320058000000023000370000006564706b7554586b4a4447634664356e683656764d7a38706858785533426937683668716779774e466931765a5466514e6e53315256000231000e00000034303030303030303030303030000004330058000000023000370000006564706b754672526f445345624a59677852744c783270733832556461596331577766533973453131796861755a7435446743486255000231000e00000034303030303030303030303030000004340058000000023000370000006564706b76384555554836386a6d6f336637556d3550657a6d66477252463234676e664c70483373564e774a6e5635625643784c326e000231000e00000034303030303030303030303030000000017072657365727665645f6379636c657300000000000000004001626c6f636b735f7065725f6379636c6500000000000000204001626c6f636b735f7065725f636f6d6d69746d656e7400000000000000104001626c6f636b735f7065725f726f6c6c5f736e617073686f7400000000000000104001626c6f636b735f7065725f766f74696e675f706572696f640000000000000050400474696d655f6265747765656e5f626c6f636b7300170000000230000200000031000231000200000030000001656e646f72736572735f7065725f626c6f636b00000000000000404002686172645f6761735f6c696d69745f7065725f6f7065726174696f6e0008000000313034303030300002686172645f6761735f6c696d69745f7065725f626c6f636b00090000003130343030303030000270726f6f665f6f665f776f726b5f7468726573686f6c6400030000002d310002746f6b656e735f7065725f726f6c6c000b0000003830303030303030303000016d696368656c736f6e5f6d6178696d756d5f747970655f73697a65000000000000408f4002736565645f6e6f6e63655f726576656c6174696f6e5f746970000700000031323530303000016f726967696e6174696f6e5f73697a6500000000000010704002626c6f636b5f73656375726974795f6465706f736974000a0000003531323030303030300002656e646f7273656d656e745f73656375726974795f6465706f73697400090000003634303030303030000462616b696e675f7265776172645f7065725f656e646f7273656d656e74002200000002300008000000313235303030300002310007000000313837353030000004656e646f7273656d656e745f726577617264002200000002300008000000313235303030300002310007000000383333333333000002636f73745f7065725f627974650005000000313030300002686172645f73746f726167655f6c696d69745f7065725f6f7065726174696f6e000600000036303030300002746573745f636861696e5f6475726174696f6e000800000031393636303830000171756f72756d5f6d696e000000000000409f400171756f72756d5f6d617800000000000058bb40016d696e5f70726f706f73616c5f71756f72756d000000000000407f4001696e697469616c5f656e646f727365727300000000000000f03f0264656c61795f7065725f6d697373696e675f656e646f7273656d656e740002000000310000
    - echo "$data_no_signature" > /tmp/sandbox/data_to_sign.hex

# activates the protocol by injecting the first block 
- name: activate-protocol-sign-data
  user: root
  image: fnndsc/ubuntu-python3
  volumes:
    - name: build
      path: /artifacts
    - name: sandbox-data
      path: /tmp/sandbox
  commands:
    - pip3 install pyblake2 ed25519 base58check
    - signature=$(/artifacts/sign_first_block_with_activator.py `cat /tmp/sandbox/data_to_sign.hex` $${ACTIVATOR_SECRET})
    # - signature=$(tezos-client --base-dir /tmp/sandbox/tezos-client -A `cat /tmp/sandbox/ocaml_ip.txt` -P 8732 sign bytes 0x01$(cat /tmp/sandbox/data_to_sign.hex) for activator | cut -d$' ' -f2)
    - echo "signature - $signature"
    # # data: from the forge_header operation + appeneded with the signature
    # # operations: empty array (0 validation passes)
    # - raw_signature=$(tezos-client --base-dir /tmp/sandbox/tezos-client -A `cat /tmp/sandbox/ocaml_ip.txt` -P 8732 hash data $signature | head -n 1 | cut -d$' ' -f4)
    # - echo "raw signature - $raw_signature"
    - data=$(cat /tmp/sandbox/data_to_sign.hex)$signature
    - echo "data - $data"
    - echo "$data" > /tmp/sandbox/signed_data.hex


# activates the protocol by injecting the first block 
- name: activate-protocol-injection
  user: root
  image: cfmanteiga/alpine-bash-curl-jq
  volumes:
    - name: build
      path: /artifacts
    - name: sandbox-data
      path: /tmp/sandbox
  commands:
    - TEZEDGE_URL=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
    - signed_data=$(cat /tmp/sandbox/signed_data.hex)
    - echo "data - $signed_data"
    - JSON_STRING=$( jq -n -c --arg d "$signed_data" '{"data":$d, "operations":[]}' )
    - echo "JSON TO SEND - $JSON_STRING"
    - injection=$(curl -X POST "$TEZEDGE_URL/injection/block" -H "Content-Type:application/json" --data $JSON_STRING)
    - echo "Block injected - $injection"

# test checks if this block is synchronized to rust node through p2p
- name: wait-for-sync-on-level-1
  image: simplestakingcom/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap --bootstrap --level=1 --node_ocaml=$${OCAML_NODE_RPC_CONTEXT_ROOT} --node_tezedge=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

- name: check-mempool-before-transfer
  user: root
  image: cfmanteiga/alpine-bash-curl-jq
  volumes:
    - name: build
      path: /artifacts
    - name: sandbox-data
      path: /tmp/sandbox
  commands:
    # get mempools
    - OCAML_URL=$${OCAML_NODE_RPC_CONTEXT_ROOT}
    - TEZEDGE_URL=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
    - ocaml_mempool=$(curl "$OCAML_URL/chains/main/mempool/pending_operations" | jq -S .)
    - tezedge_mempool=$(curl "$TEZEDGE_URL/chains/main/mempool/pending_operations" | jq -S .)
    - echo "Ocaml mempool - $ocaml_mempool"
    - echo "Tezedge mempool - $tezedge_mempool"
    # check if both are equals
    - /artifacts/assert_equals.sh "$ocaml_mempool" "$tezedge_mempool"
    # check if applied is 0
    - applied_count=$(echo $tezedge_mempool | jq '.applied | length')
    - /artifacts/assert_equals.sh 0 $applied_count

# transfer / inject operation into tezedge node, means it injects operations which is spread throught the p2p to other peers
- name: do-transfer-with-tezos_client
  user: root
  image: tezos/tezos:v7.3
  volumes:
    - name: sandbox-data
      path: /tmp/sandbox
  commands:
    - tezos-admin-client -A `cat /tmp/sandbox/ocaml_ip.txt` -P 8732 connect address `cat /tmp/sandbox/tezedge_ip.txt`:9732
    - sleep 1
    - tezos-client --base-dir /tmp/sandbox/tezos-client -A `cat /tmp/sandbox/tezedge_ip.txt` -P 18732 transfer 1 from bootstrap1 to bootstrap2 --burn-cap 1 &
    - sleep 2

- name: check-mempool-after-transfer
  user: root
  image: cfmanteiga/alpine-bash-curl-jq
  volumes:
    - name: build
      path: /artifacts
    - name: sandbox-data
      path: /tmp/sandbox
  commands:
    # get mempools
    - OCAML_URL=$${OCAML_NODE_RPC_CONTEXT_ROOT}
    - TEZEDGE_URL=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
    - ocaml_mempool=$(curl "$OCAML_URL/chains/main/mempool/pending_operations" | jq -S .)
    - tezedge_mempool=$(curl "$TEZEDGE_URL/chains/main/mempool/pending_operations" | jq -S .)
    - echo "Ocaml mempool - $ocaml_mempool"
    - echo "Tezedge mempool - $tezedge_mempool"
    # check if both are equals
    - /artifacts/assert_equals.sh "$ocaml_mempool" "$tezedge_mempool"
    # check if applied is 1
    - applied_count=$(echo $tezedge_mempool | jq '.applied | length')
    - /artifacts/assert_equals.sh 1 $applied_count

# transfer / inject operation into tezedge node, means it injects operations which is spread throught the p2p to other peers
- name: bake-a-block-with-tezos_client
  user: root
  image: tezos/tezos:v7.3
  volumes:
    - name: sandbox-data
      path: /tmp/sandbox
  commands:
    - tezos-admin-client -A `cat /tmp/sandbox/ocaml_ip.txt` -P 8732 connect address `cat /tmp/sandbox/tezedge_ip.txt`:9732
    - sleep 1
    - tezos-client --base-dir /tmp/sandbox/tezos-client -A `cat /tmp/sandbox/tezedge_ip.txt` -P 18732 bake for bootstrap2
    - tezos-admin-client -A `cat /tmp/sandbox/ocaml_ip.txt` -P 8732 connect address `cat /tmp/sandbox/tezedge_ip.txt`:9732

# test checks if this block is synchronized to rust node through p2p
- name: wait-for-sync-on-level-2
  image: simplestakingcom/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap --bootstrap --level=2 --node_ocaml=$${OCAML_NODE_RPC_CONTEXT_ROOT} --node_tezedge=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

# compare all rpc's from blocks 0 to 2 between defined nodes
- name: rpc-test-for-levels-0-2
  image: simplestakingcom/tezedge-ci-builder:latest
  pull: if-not-exists
  user: root
  volumes:
    - name: build
      path: /artifacts
  environment:
    RUST_BACKTRACE: 1
    FROM_BLOCK_HEADER: 0
    TO_BLOCK_HEADER: 2
  commands:
    - export NODE_RPC_CONTEXT_ROOT_1=$${OCAML_NODE_RPC_CONTEXT_ROOT}
    - export NODE_RPC_CONTEXT_ROOT_2=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
    - /artifacts/rpc_integration_test --nocapture --ignored test_rpc_compare

volumes:
  - name: build
    host:
      path: /etc/tezedge-ci-build/
  - name: sandbox-data
    host:
      path: /etc/tezedge-ci-data/sandbox

trigger:
  branch:
    - master
    - develop

depends_on:
  - build-and-tests

##############################################################################################################
# This pipeline runs tezedge node and ocaml node with carthagenet configuration,
# which connects just to local ocaml nodes (does not connect to Internet to or any live node)
##############################################################################################################
---
kind: pipeline
name: integration-offline-tests
# default build goes with: --network "carthagenet"
# integration test is using env variables:
# - FROM_BLOCK_HEADER - block level, (watch out, if use change this, then check parameter --stop=)
# - TO_BLOCK_HEADER - block level (also is used by bootstrap task --bootstrap)
# - WRK_TEST_BLOCK_HEADER - block level for wrk performance test - it checks severel rpc on this block
# -- all headers in interval <FROM_BLOCK_HEADER, TO_BLOCK_HEADER) are checked in test (rpc json compare)
# - OCAML_NODE_RPC_CONTEXT_ROOT_1: running ocaml node, e.g.: http://ocaml-node-run-1:8732
# - OCAML_NODE_RPC_CONTEXT_ROOT_2: running ocaml node, e.g.: http://ocaml-node-run-2:8732
# - OCAML_NODE_RPC_CONTEXT_ROOT_3: running ocaml node, e.g.: http://ocaml-node-run-3:8732
# - TEZEDGE_NODE_RPC_CONTEXT_ROOT: running tezedge node, e.g.: http://tezedge-node-run:18732

clone:
  disable: true

environment:
  NETWORK: carthagenet
  FROM_BLOCK_HEADER: 0
  TO_BLOCK_HEADER: 500 # also check parameter --stop=
  WRK_TEST_BLOCK_HEADER: 100
  WRK_TEST_DURATION: 10  # in seconds
  SODIUM_USE_PKG_CONFIG: 1
  LD_LIBRARY_PATH: ./tezos/interop/lib_tezos/artifacts:./target/release
  OCAML_NODE_RPC_CONTEXT_ROOT_1: http://ocaml-node-run-1:8732
  OCAML_NODE_RPC_CONTEXT_ROOT_2: http://ocaml-node-run-2:8732
  OCAML_NODE_RPC_CONTEXT_ROOT_3: http://ocaml-node-run-3:8732
  OCAML_NODE_RPC_CONTEXT_ROOT_4: http://ocaml-node-run-4:8732
  OCAML_NODE_P2P_PEERS: ocaml-node-run-1:9734,ocaml-node-run-2:9734,ocaml-node-run-3:9734
  TEZEDGE_NODE_RPC_CONTEXT_ROOT: http://tezedge-node-run:18732
  TEZEDGE_NODE_TARGET_BRANCH_RPC_CONTEXT_ROOT: http://tezedge-target-branch-node-run:18732
  OCAML_NODE_INDEXER_ROOT: http://tz-indexer-ocaml:8002
  TEZEDGE_NODE_INDEXER_ROOT: http://tz-indexer-ocaml:8002

steps:
- name: cleanup-node-data
  image: alpine/git
  user: root
  volumes:
    - name: tezedge-node-data
      path: /tmp/tezedge_developer
    - name: tezedge-target-branch-node-data
      path: /tmp/tezedge_target-branch_developer
  commands:
    - rm -rf /tmp/tezedge_developer/light-node
    - rm -rf /tmp/tezedge_developer/tezos-node
    - rm -rf /tmp/tezedge_target-branch_developer/light-node
    - rm -rf /tmp/tezedge_target-branch_developer/tezos-node

# just run ocaml 3 snapshosted nodes
- name: ocaml-node-run-1
  user: root
  image: tezos/tezos:v7.3
  detach: true
  volumes:
    - name: build
      path: /artifacts
    - name: ocaml-node-carthage-snapshot-data-1
      path: /home/tezos/data
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > /artifacts/ocaml_ip1.txt
    - rm -f /home/tezos/data/lock
    - cp /artifacts/identities/identity_1.json /home/tezos/data/identity.json
    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: ocaml-node-run-2
  user: root
  image: tezos/tezos:v7.3
  detach: true
  volumes:
    - name: build
      path: /artifacts
    - name: ocaml-node-carthage-snapshot-data-2
      path: /home/tezos/data
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > /artifacts/ocaml_ip2.txt
    - rm -f /home/tezos/data/lock
    - cp /artifacts/identities/identity_2.json /home/tezos/data/identity.json
    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: ocaml-node-run-3
  user: root
  image: tezos/tezos:v7.3
  detach: true
  volumes:
    - name: build
      path: /artifacts
    - name: ocaml-node-carthage-snapshot-data-3
      path: /home/tezos/data
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > /artifacts/ocaml_ip3.txt
    - rm -f /home/tezos/data/lock
    - cp /artifacts/identities/identity_3.json /home/tezos/data/identity.json
    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: ocaml-node-run-4
  user: root
  image: tezos/tezos:v7.3
  detach: true
  volumes:
    - name: build
      path: /artifacts
    - name: ocaml-node-carthage-snapshot-data-4
      path: /home/tezos/data
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4 ":9734"}' > /artifacts/ocaml_ip4.txt
    - rm -f /home/tezos/data/lock
    - cp /artifacts/identities/identity_7.json /home/tezos/data/identity.json
    - tezos-node config reset --data-dir /home/tezos/data --network $${NETWORK} --no-bootstrap-peers
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: wait-for-ocaml-snapshoted-nodes
  image: simplestakingcom/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap --bootstrap --level=$${TO_BLOCK_HEADER} --node_ocaml_1=$${OCAML_NODE_RPC_CONTEXT_ROOT_1} --node_ocaml_2=$${OCAML_NODE_RPC_CONTEXT_ROOT_2} --node_ocaml_3=$${OCAML_NODE_RPC_CONTEXT_ROOT_3} --node_ocaml_4=$${OCAML_NODE_RPC_CONTEXT_ROOT_4}

- name: tezedge-node-run
  image: simplestakingcom/tezedge-ci-builder:latest
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: build
      path: /artifacts
    - name: tezedge-node-data
      path: /tmp/tezedge_developer
  environment:
    SODIUM_USE_PKG_CONFIG: 1
  commands:
    - PEERS=$(cat /artifacts/ocaml_ip1.txt | awk '{print $1 ","}')$(cat /artifacts/ocaml_ip2.txt | awk '{print $1 ","}')$(cat /artifacts/ocaml_ip3.txt | awk '{print $1 ","}')$(cat /artifacts/ocaml_ip4.txt)
    - echo "peers - $PEERS"
    - cp /artifacts/protocol-runner /tmp/tezedge_developer/
    - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
    - export LD_LIBRARY_PATH="/artifacts/ffi:$rust_libs"
    - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
    - /artifacts/light-node --config-file "/artifacts/tezedge/tezedge_drone.config" --disable-bootstrap-lookup --peers $PEERS --peer-thresh-low=3 --peer-thresh-high=5 --identity-file "/artifacts/identities/identity_4.json" --network "$${NETWORK}" --protocol-runner "/tmp/tezedge_developer/protocol-runner" --p2p-port 19732

# if we are doing pull request, run also "target branch" build (async) for wrk total compare at the end
- name: tezedge-target-branch-node-run
  image: simplestakingcom/tezedge-ci-builder:latest
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: build
      path: /artifacts
    - name: tezedge-target-branch-node-data
      path: /tmp/tezedge_developer
    - name: cache
      path: /tmp/tezedge-cache
  environment:
    SODIUM_USE_PKG_CONFIG: 1
  commands:
    - PEERS=$(cat /artifacts/ocaml_ip1.txt | awk '{print $1 ","}')$(cat /artifacts/ocaml_ip2.txt | awk '{print $1 ","}')$(cat /artifacts/ocaml_ip3.txt | awk '{print $1 ","}')$(cat /artifacts/ocaml_ip4.txt)
    - echo "peers - $PEERS"
    - cd /tmp/tezedge-cache
    - rm -rf tezedge
    - target_branch=$${DRONE_TARGET_BRANCH}
    - echo "...checkouting target branch - $target_branch"
    - git clone https://github.com/simplestaking/tezedge.git && cd tezedge && git checkout $target_branch
    - cd /tmp/tezedge-cache/tezedge
    - cargo build --release --workspace
    - cargo run --release --bin light-node -- --config-file "./light_node/etc/tezedge/tezedge_drone.config" --peers $PEERS --peer-thresh-low=3 --peer-thresh-high=5 --network "$${NETWORK}" --identity-file "/artifacts/identities/identity_5.json"
  when:
    ref:
      - refs/pull/*/head

- name: bootstrapping-tezedge
  image: simplestakingcom/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap --bootstrap --level=$${TO_BLOCK_HEADER} --node_tezedge=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

# now we have prepared ocaml and tezedge node, that can run tests - rpc, wrk, indexer-test

# compare all rpc's from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes
- name: rpc-test
  image: simplestakingcom/tezedge-ci-builder:latest
  pull: if-not-exists
  user: root
  volumes:
    - name: build
      path: /artifacts
  environment:
    RUST_BACKTRACE: 1
  commands:
    - export NODE_RPC_CONTEXT_ROOT_1=$${OCAML_NODE_RPC_CONTEXT_ROOT_1}
    - export NODE_RPC_CONTEXT_ROOT_2=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
    - /artifacts/rpc_integration_test --nocapture --ignored test_rpc_compare

- name: tz-indexer-tezedge
  image: blockwatch/tzindex:latest
  user: root
  detach: true
  volumes:
    - name: indexer-tezedge-data
      path: /data
  environment:
    TZ_RPC_HOST: tezedge-node-run
    TZ_RPC_PORT: 18732
    TZ_SERVER_ADDR: 0.0.0.0
    TZ_SERVER_PORT: 8002
    TZ_SERVER_CORS_ENABLE: true
    TZ_DATABASE_PATH: /data/index
    TZ_SNAPSHOT_PATH: /data/snapshots
  command: ["tzindex", "run", "--stop=501"]

- name: tz-indexer-ocaml
  image: blockwatch/tzindex:latest
  user: root
  detach: true
  volumes:
    - name: indexer-ocaml-data
      path: /data
  environment:
    TZ_RPC_HOST: ocaml-node-run-1
    TZ_RPC_PORT: 8732
    TZ_SERVER_ADDR: 0.0.0.0
    TZ_SERVER_PORT: 8002
    TZ_SERVER_CORS_ENABLE: true
    TZ_DATABASE_PATH: /data/index
    TZ_SNAPSHOT_PATH: /data/snapshots
  command: ["tzindex", "run", "--stop=501"]

# compare indexing from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes
- name: indexer-test
  image: simplestakingcom/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap --indexer-test --level=$${TO_BLOCK_HEADER} --node_tezedge=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --indexer_tezedge=$${TEZEDGE_NODE_INDEXER_ROOT} --node_ocaml=$${OCAML_NODE_RPC_CONTEXT_ROOT_1} --indexer_ocaml=$${OCAML_NODE_INDEXER_ROOT}

# compare several rpc's performances from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes (with two nodes (current branch and ocaml))
# not triggered on pull request, because on pull request is triggered more complex wrk test
- name: wrk-performance-test-tezedge-vs-ocaml
  image: simplestakingcom/tezos-node-bootstrap:latest
  pull: always
  user: root
  commands:
    - tezos-node-bootstrap --performance-test --level=$${WRK_TEST_BLOCK_HEADER} --node_tezedge=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --node_ocaml=$${OCAML_NODE_RPC_CONTEXT_ROOT_1} --wrk-duration=$${WRK_TEST_DURATION}
  when:
    ref:
      exclude:
      - refs/pull/*/head

# this is triggerd just on pull request to target branch
- name: bootstrapping-tezedge-target-branch
  image: simplestakingcom/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap --bootstrap --level=$${WRK_TEST_BLOCK_HEADER} --node_tezedge_target_branch=$${TEZEDGE_NODE_TARGET_BRANCH_RPC_CONTEXT_ROOT}
  when:
    ref:
    - refs/pull/*/head

#  compare several rpc's performances from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes (with tree nodes (target_branch, current branch and ocaml))
- name: wrk-performance-test--tezedge-vs-ocaml-vs-tezedge_target_branch
  image: simplestakingcom/tezos-node-bootstrap:latest
  pull: always
  user: root
  commands:
    - tezos-node-bootstrap --performance-test --level=$${WRK_TEST_BLOCK_HEADER} --node_tezedge_target_branch=$${TEZEDGE_NODE_TARGET_BRANCH_RPC_CONTEXT_ROOT} --node_tezedge=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --node_ocaml=$${OCAML_NODE_RPC_CONTEXT_ROOT_1} --wrk-duration=$${WRK_TEST_DURATION}
  when:
    ref:
    - refs/pull/*/head

volumes:
  - name: build
    host:
      path: /etc/tezedge-ci-build
  - name: ocaml-node-carthage-snapshot-data-1
    host:
      path: /etc/ocaml-node-carthage-snapshot-data-1
  - name: ocaml-node-carthage-snapshot-data-2
    host:
      path: /etc/ocaml-node-carthage-snapshot-data-2
  - name: ocaml-node-carthage-snapshot-data-3
    host:
      path: /etc/ocaml-node-carthage-snapshot-data-3
  - name: ocaml-node-carthage-snapshot-data-4
    host:
      path: /etc/ocaml-node-carthage-snapshot-data-4
  - name: tezedge-node-data
    host:
      path: /etc/tezedge-node
  - name: tezedge-target-branch-node-data
    host:
      path: /etc/tezedge-target-branch-node
  - name: cache
    host:
      path: /etc/tezedge-ci/cache
  - name: indexer-tezedge-data
    temp: {}
  - name: indexer-ocaml-data
    temp: {}

trigger:
  branch:
    - master
    - develop

depends_on:
  - build-and-tests

##############################################################################################################
# This pipeline runs tezedge node with mainnet configuration againts ocaml node with carthagenet configuration
#
##############################################################################################################
---
kind: pipeline
name: connect-from-different-network-test

clone:
  disable: true

environment:
  NETWORK: carthagenet
  FROM_BLOCK_HEADER: 0
  TO_BLOCK_HEADER: 0
  SODIUM_USE_PKG_CONFIG: 1
  OCAML_NODE_RPC_CONTEXT_ROOT: http://ocaml-node-carthage-run:8732
  TEZEDGE_NODE_RUN_MAINNET_RPC_CONTEXT_ROOT: http://tezedge-node-run-mainnet:18732

steps:
  - name: cleanup-node-data
    image: alpine/git
    user: root
    volumes:
      - name: tezedge-node-data
        path: /tmp/tezedge_developer
    commands:
      - rm -rf /tmp/tezedge_developer/light-node
      - rm -rf /tmp/tezedge_developer/tezos-node

  - name: tezedge-node-run-mainnet
    image: simplestakingcom/tezedge-ci-builder:latest
    pull: if-not-exists
    user: root
    detach: true
    volumes:
      - name: build
        path: /artifacts
      - name: tezedge-node-data
        path: /tmp/tezedge_developer
      - name: cache
        path: /tmp/tezedge-cache
    environment:
      SODIUM_USE_PKG_CONFIG: 1
    commands:
      - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4}' > /tmp/tezedge-cache/tezedge_ip.txt
      - cp /artifacts/protocol-runner /tmp/tezedge-cache/
      - rust_libs=$(echo "`rustup show home`/toolchains/`rustup show active-toolchain | tr " " "\n" | head -1`/lib")
      - export LD_LIBRARY_PATH="/artifacts/ffi:$rust_libs"
      - echo "LD_LIBRARY_PATH - $LD_LIBRARY_PATH"
      - /artifacts/light-node --config-file "/artifacts/tezedge/tezedge_drone.config" --disable-bootstrap-lookup --network mainnet --identity-file "/artifacts/identities/identity_6.json" --protocol-runner /tmp/tezedge-cache/protocol-runner

  - name: bootstrapping-tezedge
    image: simplestakingcom/tezos-node-bootstrap:latest
    commands:
      - tezos-node-bootstrap --bootstrap --level=0 --node_tezedge=$${TEZEDGE_NODE_RUN_MAINNET_RPC_CONTEXT_ROOT}

    # just run ocaml snapshosted node
  - name: ocaml-node-carthage-run
    user: root
    image: tezos/tezos:v7.3
    detach: true
    volumes:
      - name: build
        path: /artifacts
      - name: cache
        path: /tmp/tezedge-cache
    commands:
      - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4}' > /tmp/tezedge-cache/ocaml_ip.txt
      - mkdir /home/tezos/data/
      - cp /artifacts/identities/identity_7.json /home/tezos/data/identity.json
      - rm -f /home/tezos/data/config.json
      - tezos-node config init --data-dir /home/tezos/data --network carthagenet
      - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network carthagenet --no-bootstrap-peers

  - name: wait-ocaml-node-carthage-to-start
    image: simplestakingcom/tezos-node-bootstrap:latest
    commands:
      - tezos-node-bootstrap --bootstrap --level=0 --node_ocaml=$${OCAML_NODE_RPC_CONTEXT_ROOT}

  - name: ocaml-node-carthage-connect-to-tezedge
    user: root
    image: tezos/tezos:v7.3
    volumes:
      - name: cache
        path: /tmp/tezedge-cache
    commands:
      # catch error from tezos-admin-client
      - tezos-admin-client -A `cat /tmp/tezedge-cache/ocaml_ip.txt` -P 8732 connect address `cat /tmp/tezedge-cache/tezedge_ip.txt`:9732 &> /tmp/tezedge-cache/tezos-admin-client-error.log &
      - sleep 1
      - cat /tmp/tezedge-cache/tezos-admin-client-error.log

  - name: check-ocaml-error
    user: root
    image: cfmanteiga/alpine-bash-curl-jq
    volumes:
      - name: build
        path: /artifacts
      - name: cache
        path: /tmp/tezedge-cache
    commands:
      - error=$(cat /tmp/tezedge-cache/tezos-admin-client-error.log)
      - /artifacts/assert_contains.sh "$error" "Rejected peer connection"
      - /artifacts/assert_contains.sh "$error" "no common network protocol"

  - name: check-ocaml-still-running
    image: simplestakingcom/tezos-node-bootstrap:latest
    commands:
      - tezos-node-bootstrap --bootstrap --level=0 --node_ocaml=$${OCAML_NODE_RPC_CONTEXT_ROOT}

volumes:
  - name: tezedge-node-data
    host:
      path: /etc/tezedge-node
  - name: cache
    host:
      path: /etc/tezedge-ci-cache
  - name: build
    host:
      path: /etc/tezedge-ci-build

trigger:
  branch:
    - master
    - develop

depends_on:
  - sandbox-inject-operation
  - integration-offline-tests