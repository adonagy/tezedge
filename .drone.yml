##############################################################################################################
# Drone contains these pipelines:
# - standalone-tests (just rust tests)
# - sandbox-standalone-tests (runs sandboxed ocaml and rust nodes and checks p2p, rpc between them)
# - connection-from-different-network-test (runs live ocaml node and live rust node)
# - integration-live-tests (runs live ocaml node and live rust node)
##############################################################################################################
# Ocaml stuff is based on image tezos/tezos:v7.2 (if released new one, fell free to upgrade it here)
##############################################################################################################

##############################################################################################################
# This pipeline runs just sandalone test, which does not run any node, and do not connect to the internet
##############################################################################################################
kind: pipeline
name: standalone-tests

steps:
# runs multiple protocol runners with init_protocol_context and checks if all are correctly initialized
- name: mutliple-protocol-runners-test
  image: simplestakingcom/tezedge-ci-builder:latest
  pull: if-not-exists
  user: root
  environment:
    RUST_BACKTRACE: 1
    SODIUM_USE_PKG_CONFIG: 1
    OCAML_BUILD_CHAIN: remote
    LD_LIBRARY_PATH: ./tezos/interop/lib_tezos/artifacts
    OCAML_LOG_ENABLED: false
    PROTOCOL_RUNNER: /drone/src/target/release/protocol-runner
    LOG_LEVEL: debug
  commands:
    - cargo build --release --workspace
    - cargo test --verbose --release -- --nocapture --ignored test_mutliple_protocol_runners_with_one_write_multiple_read_init_context

# runs integration test for shell actors which applies blocks and checks context and mempool
- name: shell-actors-apply-context-mempool-test
  image: simplestakingcom/tezedge-ci-builder:latest
  pull: if-not-exists
  user: root
  environment:
    RUST_BACKTRACE: 1
    SODIUM_USE_PKG_CONFIG: 1
    OCAML_BUILD_CHAIN: remote
    LD_LIBRARY_PATH: ./tezos/interop/lib_tezos/artifacts
    OCAML_LOG_ENABLED: false
    PROTOCOL_RUNNER: /drone/src/target/release/protocol-runner
    LOG_LEVEL: debug
  commands:
    - cargo build --release --workspace
    - cargo test --verbose --release -- --nocapture --ignored test_actors_apply_blocks_and_check_context_and_mempool

trigger:
  branch:
    - master

##############################################################################################################
# This pipeline runs tezedge node and ocaml node with sandbox configuration
##############################################################################################################
---
kind: pipeline
name: sandbox-standalone-tests

environment:
  NETWORK: sandbox
  SODIUM_USE_PKG_CONFIG: 1
  LD_LIBRARY_PATH: ./tezos/interop/lib_tezos/artifacts:./target/release
  OCAML_NODE_RPC_CONTEXT_ROOT: http://ocaml-node-sandbox-run:8732
  TEZEDGE_NODE_RPC_CONTEXT_ROOT: http://tezedge-node-sandbox-run:18732
  ACTIVATOR_SECRET: unencrypted:edsk31vznjHSSpGExDMHYASz45VZqXN4DPxvsa4hAyY8dHM28cZzp6
  BOOTSTRAP1_IDENTITY: tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx
  BOOTSTRAP1_PUBLIC: edpkuBknW28nW72KG6RoHtYW7p12T6GKc7nAbwYX5m8Wd9sDVC9yav
  BOOTSTRAP1_SECRET: unencrypted:edsk3gUfUPyBSfrS9CCgmCiQsTCHGkviBDusMxDJstFtojtc1zcpsh
  BOOTSTRAP2_IDENTITY: tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN
  BOOTSTRAP2_PUBLIC: edpktzNbDAUjUk697W7gYg2CRuBQjyPxbEg8dLccYYwKSKvkPvjtV9
  BOOTSTRAP2_SECRET: unencrypted:edsk39qAm1fiMjgmPkw1EgQYkMzkJezLNewd7PLNHTkr6w9XA2zdfo

steps:
- name: cleanup-node-data
  image: alpine/git
  user: root
  volumes:
    - name: sandbox-data
      path: /tmp/sandbox
  commands:
    - rm -rf /tmp/sandbox/light-node
    - rm -rf /tmp/sandbox/tezos-node
    - rm -rf /tmp/sandbox/tezos-client
    - rm -rf /home/tezos/data/
    - cp ./light_node/etc/tezedge_sandbox/sandbox-patch-context.json /tmp/sandbox/
    - cp ./light_node/etc/tezedge_sandbox/006-carthage-protocol-parameters.json /tmp/sandbox/
    - cp ./light_node/etc/drone/assert_equals.sh /tmp/sandbox/ && chmod 755 /tmp/sandbox/assert_equals.sh

# run empty rust node and wait for it
- name: tezedge-node-sandbox-run
  image: simplestakingcom/tezedge-ci-builder:latest
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: sandbox-data
      path: /tmp/sandbox
  environment:
    SODIUM_USE_PKG_CONFIG: 1
    OCAML_BUILD_CHAIN: remote
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4}' > /tmp/sandbox/tezedge_ip.txt
    - cargo build --release
    - cp ./target/release/protocol-runner /tmp/sandbox/
    - cargo run --release --bin light-node -- --config-file ./light_node/etc/tezedge_sandbox/tezedge_drone_sandbox.config --identity-expected-pow 0.0 --identity-file /tmp/sandbox/light-node/identity.json --tezos-data-dir /tmp/sandbox/tezos-node --bootstrap-db-path /tmp/sandbox/light-node --network sandbox --protocol-runner /tmp/sandbox/protocol-runner --peer-thresh-high 1 --peer-thresh-low 1 --sandbox-patch-context-json-file /tmp/sandbox/sandbox-patch-context.json --log-level trace

- name: wait-for-tezedge-to-start
  image: simplestakingcom/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap --bootstrap --level=0 --node_tezedge=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

# run empty ocaml sandbox and wait for it
- name: ocaml-node-sandbox-run
  user: root
  image: tezos/tezos:v7.2
  detach: true
  volumes:
    - name: sandbox-data
      path: /tmp/sandbox
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4}' > /tmp/sandbox/ocaml_ip.txt
    - mkdir /home/tezos/data/
    - mkdir /tmp/sandbox/tezos-client
    - tezos-node config init --network sandbox --data-dir /home/tezos/data/ --net-addr 0.0.0.0:9732 --rpc-addr 0.0.0.0:8732 --expected-pow 0.0 --connections 1
    - tezos-node identity generate 0.0 --data-dir /home/tezos/data/
    - tezos-node run --network sandbox --data-dir /home/tezos/data/ --sandbox /tmp/sandbox/sandbox-patch-context.json --no-bootstrap-peers --singleprocess --bootstrap-threshold 1 -vv

- name: wait-for-ocaml-to-start
  image: simplestakingcom/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap --bootstrap --level=0 --node_ocaml=$${OCAML_NODE_RPC_CONTEXT_ROOT}

# connect both nodes with tezos-admin-client
- name: connect-ocaml-and-rust
  user: root
  image: tezos/tezos:v7.2
  volumes:
    - name: sandbox-data
      path: /tmp/sandbox
  commands:
    - tezos-admin-client -A `cat /tmp/sandbox/ocaml_ip.txt` -P 8732 connect address `cat /tmp/sandbox/tezedge_ip.txt`:9732
    - sleep 3
# TODO: instead of sleep 3, check status established
# TODO: write rpc test for check network/peers

# inject protocol to ocaml node, means it creates the first block with level 1
- name: inject-first-block-with-ocaml-client
  user: root
  image: tezos/tezos:v7.2
  volumes:
    - name: sandbox-data
      path: /tmp/sandbox
  commands:
    - tezos-client --base-dir /tmp/sandbox/tezos-client -A `cat /tmp/sandbox/ocaml_ip.txt` -P 8732 import secret key activator $${ACTIVATOR_SECRET}
    - tezos-client --base-dir /tmp/sandbox/tezos-client -A `cat /tmp/sandbox/ocaml_ip.txt` -P 8732 import secret key bootstrap1 $${BOOTSTRAP1_SECRET}
    - tezos-client --base-dir /tmp/sandbox/tezos-client -A `cat /tmp/sandbox/ocaml_ip.txt` -P 8732 import secret key bootstrap2 $${BOOTSTRAP2_SECRET}
    - tezos-client --base-dir /tmp/sandbox/tezos-client -A `cat /tmp/sandbox/ocaml_ip.txt` -P 8732 --block genesis activate protocol PsCARTHAGazKbHtnKfLzQg3kms52kSRpgnDY982a9oYsSXRLQEb with fitness 1 and key activator and parameters /tmp/sandbox/006-carthage-protocol-parameters.json --timestamp $(TZ='AAA+1' date +%FT%TZ)

# test checks if this block is synchronized to rust node through p2p
- name: wait-for-sync-on-level-1
  image: simplestakingcom/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap --bootstrap --level=1 --node_ocaml=$${OCAML_NODE_RPC_CONTEXT_ROOT} --node_tezedge=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

- name: check-mempool-before-transfer
  user: root
  image: cfmanteiga/alpine-bash-curl-jq
  volumes:
    - name: sandbox-data
      path: /tmp/sandbox
  commands:
    # get mempools
    - OCAML_URL=$${OCAML_NODE_RPC_CONTEXT_ROOT}
    - TEZEDGE_URL=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
    - ocaml_mempool=$(curl "$OCAML_URL/chains/main/mempool/pending_operations" | jq -S .)
    - tezedge_mempool=$(curl "$TEZEDGE_URL/chains/main/mempool/pending_operations" | jq -S .)
    - echo "Ocaml mempool - $ocaml_mempool"
    - echo "Tezedge mempool - $tezedge_mempool"
    # check if both are equals
    - /tmp/sandbox/assert_equals.sh "$ocaml_mempool" "$tezedge_mempool"
    # check if applied is 0
    - applied_count=$(echo $tezedge_mempool | jq '.applied | length')
    - /tmp/sandbox/assert_equals.sh 0 $applied_count

# # transfer / inject operation to ocaml node, means it injects operations which is spread throught the p2p to other peers
# - name: do-transfer-with-ocaml-client
#   user: root
#   image: tezos/tezos:v7.2
#   volumes:
#     - name: sandbox-data
#       path: /tmp/sandbox
#   commands:
#     - tezos-admin-client -A `cat /tmp/sandbox/ocaml_ip.txt` -P 8732 connect address `cat /tmp/sandbox/tezedge_ip.txt`:9732
#     - sleep 1
#     - tezos-client --base-dir /tmp/sandbox/tezos-client -A `cat /tmp/sandbox/ocaml_ip.txt` -P 8732 transfer 1 from bootstrap1 to bootstrap2 --burn-cap 1 &
#     - sleep 2

# reconnect the two nodes
- name: reconnect
  user: root
  image: tezos/tezos:v7.2
  volumes:
    - name: sandbox-data
      path: /tmp/sandbox
  commands:
    - tezos-admin-client -A `cat /tmp/sandbox/ocaml_ip.txt` -P 8732 connect address `cat /tmp/sandbox/tezedge_ip.txt`:9732
    - sleep 1

- name: inject-operation-into-tezedge
  user: root
  image: cfmanteiga/alpine-bash-curl-jq
  volumes:
    - name: sandbox-data
      path: /tmp/sandbox
  commands:
    - TEZEDGE_URL=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
    - curl --request POST "$TEZEDGE_URL/injection/operation" --header 'Content-Type:application/json' --data-raw '"c5314e8f9408f9b6eac9a4d4cfe47a5fad6ed2fa24d96ea8fce5aa637c9fa0cf6c0002298c03ed7d454a101eb7022bc95f7e5f41ac78810a01c35000c0843d0000e7670f32038107a59a2b9cfefae36ea21f5aa63c00e6614c78207d6ee3234db35417619c4728ea7c1fa6541bd53ff09d3550d2e51d7fb5908fe9f2202f59c8858a866f6037bee939cb34aedabccf2038a35d261e07"'


- name: check-mempool-after-transfer
  user: root
  image: cfmanteiga/alpine-bash-curl-jq
  volumes:
    - name: sandbox-data
      path: /tmp/sandbox
  commands:
    # get mempools
    - OCAML_URL=$${OCAML_NODE_RPC_CONTEXT_ROOT}
    - TEZEDGE_URL=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}
    - ocaml_mempool=$(curl "$OCAML_URL/chains/main/mempool/pending_operations" | jq -S .)
    - tezedge_mempool=$(curl "$TEZEDGE_URL/chains/main/mempool/pending_operations" | jq -S .)
    - echo "Ocaml mempool - $ocaml_mempool"
    - echo "Tezedge mempool - $tezedge_mempool"
    # check if both are equals
    - /tmp/sandbox/assert_equals.sh "$ocaml_mempool" "$tezedge_mempool"
    # check if applied is 1
    - applied_count=$(echo $tezedge_mempool | jq '.applied | length')
    - /tmp/sandbox/assert_equals.sh 1 $applied_count

# compare all rpc's from blocks 0 to 1 between defined nodes
- name: rpc-test-for-levels-0-1
  image: simplestakingcom/tezedge-ci-builder:latest
  pull: if-not-exists
  user: root
  environment:
    RUST_BACKTRACE: 1
    SODIUM_USE_PKG_CONFIG: 1
    OCAML_BUILD_CHAIN: remote
    LD_LIBRARY_PATH: ./tezos/interop/lib_tezos/artifacts
    FROM_BLOCK_HEADER: 0
    TO_BLOCK_HEADER: 1
  commands:
    - cargo test --verbose --release -- --nocapture --ignored test_rpc_compare

volumes:
  - name: sandbox-data
    host:
      path: /etc/tezedge-ci/sandbox

trigger:
  branch:
    - feature/injection-operation-rpc

##############################################################################################################
# This pipeline runs tezedge node with mainnet configuration againts ocaml node with carthagenet configuration
##############################################################################################################
---
kind: pipeline
name: connection-from-different-network-test

environment:
  NETWORK: carthagenet
  FROM_BLOCK_HEADER: 0
  TO_BLOCK_HEADER: 0
  SODIUM_USE_PKG_CONFIG: 1
  LD_LIBRARY_PATH: ./tezos/interop/lib_tezos/artifacts:./target/release
  OCAML_NODE_RPC_CONTEXT_ROOT: http://ocaml-node-carthage-run:8732
  TEZEDGE_NODE_RUN_MAINNET_RPC_CONTEXT_ROOT: http://tezedge-node-run-mainnet:18732

steps:
- name: cleanup-node-data
  image: alpine/git
  user: root
  volumes:
    - name: tezedge-node-data
      path: /tmp/tezedge_developer
  commands:
    - rm -rf /tmp/tezedge_developer/light-node
    - rm -rf /tmp/tezedge_developer/tezos-node

- name: tezedge-node-run-mainnet
  image: simplestakingcom/tezedge-ci-builder:latest
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: tezedge-node-data
      path: /tmp/tezedge_developer
    - name: cache
      path: /tmp/tezedge-cache
  environment:
    SODIUM_USE_PKG_CONFIG: 1
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4}' > /tmp/tezedge-cache/tezedge_ip.txt
    - cargo build --release --workspace
    - cargo run --release --bin light-node -- --config-file "./light_node/etc/tezedge/tezedge_drone.config" --network mainnet --identity-file "/drone/src/docker/identities/identity_tezedge_master.json"

- name: bootstrapping-tezedge-not-fixed
  image: simplestakingcom/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap --bootstrap --level=0 --node_tezedge=$${TEZEDGE_NODE_RUN_MAINNET_RPC_CONTEXT_ROOT}

  # just run ocaml snapshosted node
- name: ocaml-node-carthage-run
  user: root
  image: tezos/tezos:v7.2
  detach: true
  volumes:
    - name: cache
      path: /tmp/tezedge-cache
  commands:
    - ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4}' > /tmp/tezedge-cache/ocaml_ip.txt
    - mkdir /home/tezos/data/
    - cp /drone/src/docker/identities/identity_ocaml.json /home/tezos/data/identity.json
    - rm -f /home/tezos/data/config.json
    - tezos-node config init --data-dir /home/tezos/data --network carthagenet
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network carthagenet

- name: ocaml-node-carthage-connect-to-tezedge
  user: root
  image: tezos/tezos:v7.2
  detach: true
  volumes:
    - name: cache
      path: /tmp/tezedge-cache
  commands:
    - sleep 20
    - tezos-admin-client -A `cat /tmp/tezedge-cache/ocaml_ip.txt` -P 8732 connect address `cat /tmp/tezedge-cache/tezedge_ip.txt`:9732

- name: bootstrapping-ocaml
  image: simplestakingcom/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap --bootstrap --level=10 --node_ocaml=$${OCAML_NODE_RPC_CONTEXT_ROOT}

volumes:
  - name: tezedge-node-data
    host:
      path: /etc/tezedge-node
  - name: cache
    host:
      path: /etc/tezedge-ci/cache

trigger:
  branch:
    - master

depends_on:
  - sandbox-standalone-tests

##############################################################################################################
# This pipeline runs tezedge node and ocaml node with carthagenet configuration, which connects to to internet
##############################################################################################################
---
kind: pipeline
name: integration-live-tests
# default build goes with: --network "carthagenet"
# integration test is using env variables:
# - FROM_BLOCK_HEADER - block level, (watch out, if use change this, then check parameter --stop=)
# - TO_BLOCK_HEADER - block level (also is used by bootstrap task --bootstrap)
# - WRK_TEST_BLOCK_HEADER - block level for wrk performance test - it checks severel rpc on this block
# -- all headers in interval <FROM_BLOCK_HEADER, TO_BLOCK_HEADER) are checked in test (rpc json compare)
# - OCAML_NODE_RPC_CONTEXT_ROOT: running ocaml node, e.g.: http://ocaml-node-run:8732
# - TEZEDGE_NODE_RPC_CONTEXT_ROOT: running tezedge node, e.g.: http://tezedge-node-run:18732

environment:
  NETWORK: carthagenet
  FROM_BLOCK_HEADER: 0
  TO_BLOCK_HEADER: 500 # also check parameter --stop=
  WRK_TEST_BLOCK_HEADER: 100
  SODIUM_USE_PKG_CONFIG: 1
  LD_LIBRARY_PATH: ./tezos/interop/lib_tezos/artifacts:./target/release
  OCAML_NODE_RPC_CONTEXT_ROOT: http://ocaml-node-run:8732
  TEZEDGE_NODE_RPC_CONTEXT_ROOT: http://tezedge-node-run:18732
  TEZEDGE_NODE_MASTER_RPC_CONTEXT_ROOT: http://tezedge-master-node-run:18732
  OCAML_NODE_INDEXER_ROOT: http://tz-indexer-ocaml:8002
  TEZEDGE_NODE_INDEXER_ROOT: http://tz-indexer-ocaml:8002

steps:
- name: cleanup-node-data
  image: alpine/git
  user: root
  volumes:
    - name: tezedge-node-data
      path: /tmp/tezedge_developer
    - name: tezedge-master-node-data
      path: /tmp/tezedge_master_developer
  commands:
    - rm -rf /tmp/tezedge_developer/light-node
    - rm -rf /tmp/tezedge_developer/tezos-node
    - rm -rf /tmp/tezedge_master_developer/light-node
    - rm -rf /tmp/tezedge_master_developer/tezos-node

- name: tezedge-node-run
  image: simplestakingcom/tezedge-ci-builder:latest
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: tezedge-node-data
      path: /tmp/tezedge_developer
  environment:
    SODIUM_USE_PKG_CONFIG: 1
  commands:
    - cargo build --release --workspace
    - cp ./target/release/protocol-runner /tmp/tezedge_developer/
    - cargo run --release --bin light-node -- --config-file "./light_node/etc/tezedge/tezedge_drone.config" --network "$${NETWORK}" --identity-file "/drone/src/docker/identities/identity_tezedge.json" --p2p-port 19732 --protocol-runner "/tmp/tezedge_developer/protocol-runner"

- name: bootstrapping-tezedge
  image: simplestakingcom/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap --bootstrap --level=$${TO_BLOCK_HEADER} --node_tezedge=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT}

  # just run ocaml snapshosted node
- name: ocaml-node-run
  user: root
  image: tezos/tezos:v7-release
  detach: true
  volumes:
    - name: ocaml-node-carthage-snapshot-data
      path: /home/tezos/data
  commands:
    - rm -f /home/tezos/data/lock
    - cp /drone/src/docker/identities/identity_ocaml.json /home/tezos/data/identity.json
    - tezos-node run --data-dir /home/tezos/data --history-mode archive --rpc-addr 0.0.0.0:8732 --net-addr 0.0.0.0:9734 --network $${NETWORK} --no-bootstrap-peers

- name: bootstrapping-ocaml
  image: simplestakingcom/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap --bootstrap --level=$${TO_BLOCK_HEADER} --node_ocaml=$${OCAML_NODE_RPC_CONTEXT_ROOT}

# now we have prepared ocaml and tezedge node, that can run tests - rpc, wrk, indexer-test

# if we are doing pull request, run also master build (async) for wrk total compare
- name: tezedge-master-node-run
  image: simplestakingcom/tezedge-ci-builder:latest
  pull: if-not-exists
  user: root
  detach: true
  volumes:
    - name: tezedge-master-node-data
      path: /tmp/tezedge_developer
    - name: cache
      path: /tmp/tezedge-cache
  environment:
    SODIUM_USE_PKG_CONFIG: 1
  commands:
    - cd /tmp/tezedge-cache
    - rm -rf tezedge
    - git clone https://github.com/simplestaking/tezedge.git && cd tezedge
    - cd /tmp/tezedge-cache/tezedge
    - cargo build --release --workspace
    - cargo run --release --bin light-node -- --config-file "./light_node/etc/tezedge/tezedge_drone.config" --network "$${NETWORK}" --identity-file "/drone/src/docker/identities/identity_tezedge_master.json"
  when:
    ref:
    - refs/pull/*/head

# compare all rpc's from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes
- name: rpc-test
  image: simplestakingcom/tezedge-ci-builder:latest
  pull: if-not-exists
  user: root
  environment:
    RUST_BACKTRACE: 1
    SODIUM_USE_PKG_CONFIG: 1
    OCAML_BUILD_CHAIN: remote
    LD_LIBRARY_PATH: ./tezos/interop/lib_tezos/artifacts
  commands:
    - cargo test --verbose --release -- --nocapture --ignored test_rpc_compare

# compare several rpc's performances from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes (with two nodes (current branch and ocaml))
- name: wrk-performance-test-tezedge-vs-ocaml
  image: simplestakingcom/tezos-node-bootstrap:latest
  pull: always
  user: root
  commands:
    - tezos-node-bootstrap --performance-test --level=$${WRK_TEST_BLOCK_HEADER} --node_tezedge=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --node_ocaml=$${OCAML_NODE_RPC_CONTEXT_ROOT}

- name: tz-indexer-tezedge
  image: blockwatch/tzindex:latest
  user: root
  detach: true
  volumes:
    - name: indexer-tezedge-data
      path: /data
  environment:
    TZ_RPC_HOST: tezedge-node-run
    TZ_RPC_PORT: 18732
    TZ_SERVER_ADDR: 0.0.0.0
    TZ_SERVER_PORT: 8002
    TZ_SERVER_CORS_ENABLE: true
    TZ_DATABASE_PATH: /data/index
    TZ_SNAPSHOT_PATH: /data/snapshots
  command: ["tzindex", "run", "--stop=501"]

- name: tz-indexer-ocaml
  image: blockwatch/tzindex:latest
  user: root
  detach: true
  volumes:
    - name: indexer-ocaml-data
      path: /data
  environment:
    TZ_RPC_HOST: ocaml-node-run
    TZ_RPC_PORT: 8732
    TZ_SERVER_ADDR: 0.0.0.0
    TZ_SERVER_PORT: 8002
    TZ_SERVER_CORS_ENABLE: true
    TZ_DATABASE_PATH: /data/index
    TZ_SNAPSHOT_PATH: /data/snapshots
  command: ["tzindex", "run", "--stop=501"]

# compare indexing from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes
- name: indexer-test
  image: simplestakingcom/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap --indexer-test --level=$${TO_BLOCK_HEADER} --node_tezedge=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --indexer_tezedge=$${TEZEDGE_NODE_INDEXER_ROOT} --node_ocaml=$${OCAML_NODE_RPC_CONTEXT_ROOT} --indexer_ocaml=$${OCAML_NODE_INDEXER_ROOT}

# this is triggerd just on pull request to master
- name: bootstrapping-tezedge-master
  image: simplestakingcom/tezos-node-bootstrap:latest
  commands:
    - tezos-node-bootstrap --bootstrap --level=$${WRK_TEST_BLOCK_HEADER} --node_tezedge_master=$${TEZEDGE_NODE_MASTER_RPC_CONTEXT_ROOT}
  when:
    ref:
    - refs/pull/*/head

#  compare several rpc's performances from FROM_BLOCK_HEADER to TO_BLOCK_HEADER between defined nodes (with tree nodes (master, current branch and ocaml))
- name: wrk-performance-test--tezedge-vs-ocaml-vs-tezedge_master
  image: simplestakingcom/tezos-node-bootstrap:latest
  pull: always
  user: root
  commands:
    - tezos-node-bootstrap --performance-test --level=$${WRK_TEST_BLOCK_HEADER} --node_tezedge_master=$${TEZEDGE_NODE_MASTER_RPC_CONTEXT_ROOT} --node_tezedge=$${TEZEDGE_NODE_RPC_CONTEXT_ROOT} --node_ocaml=$${OCAML_NODE_RPC_CONTEXT_ROOT}
  when:
    ref:
    - refs/pull/*/head

volumes:
  - name: ocaml-node-carthage-snapshot-data
    host:
      path: /etc/ocaml-node-carthage-snapshot-data
  - name: tezedge-node-data
    host:
      path: /etc/tezedge-node
  - name: tezedge-master-node-data
    host:
      path: /etc/tezedge-master-node
  - name: cache
    host:
      path: /etc/tezedge-ci/cache
  - name: indexer-tezedge-data
    temp: {}
  - name: indexer-ocaml-data
    temp: {}

trigger:
  branch:
    - master

depends_on:
- connection-from-different-network-test